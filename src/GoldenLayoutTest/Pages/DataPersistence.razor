@page "/DataPersistence"
@inject IJSRuntime JSRuntime
@using Blazor.GoldenLayout
@using System.Text.Json
<PageTitle>DataPersistence</PageTitle>

<GoldenLayoutContainer @ref=goldenLayout Style="width:1000px;height:800px" GoldenLayoutConfiguration="layoutConfig" LoadGoldenLayoutCallBack="Load">
</GoldenLayoutContainer>

<GoldenLayoutSpawner>
    <GoldenLayoutSpawnerItem ContentItem="contentItem">Add the Counter of Component</GoldenLayoutSpawnerItem>
</GoldenLayoutSpawner>

<button @onclick=Save>Save Layout</button>
@code {

    private ContentItem contentItem = new ContentItem
        {
            ContentType = ContentType.Component,
            ComponentName = "Counter",
            Title = "添加",
            IsClosable = true
        };
    private GoldenLayoutContainer? goldenLayout;

    private async Task<GoldenLayoutConfiguration?> Load()
    {
        try
        {
            var load = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "storage");
            if (!string.IsNullOrEmpty(load))
            {
                var GoldenLayoutConfiguration = JsonSerializer.Deserialize<GoldenLayoutConfiguration>(load);

                if (GoldenLayoutConfiguration != null)
                {
                    return GoldenLayoutConfiguration;
                }
                else
                {
                    Console.WriteLine("Failed to deserialize the configuration: layoutConfig is null.");
                }
                return null;
            }
            else
            {
                Console.WriteLine("Load failed - no data found in localStorage.");
                return null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
    }
    private async Task Save()
    {
        var content = await goldenLayout!.ToConfig();
        if (content != null)
        {
            var json = JsonSerializer.Serialize(content, new JsonSerializerOptions
                {
                    WriteIndented = true
                });
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "storage", json);
            Console.WriteLine(json);

        }
        else
        {
            Console.WriteLine("save failed");
        }
    }


    private GoldenLayoutConfiguration layoutConfig = new GoldenLayoutConfiguration
        {
            Settings = new Settings
            {
                SelectionEnabled = true
            },
            Content = new List<ContentItem>
    {
        new ContentItem
        {
            ContentType = ContentType.Row,
            Content = new List<ContentItem>
            {
                new ContentItem
                {
                    ContentType = ContentType.Component,
                    ComponentName = "Counter",
                    Title="计数器",
                    ComponentState=new Dictionary<string, object>
                    {
                        {"Cnt",123 }
                    }
                },
                new ContentItem
                {
                    ContentType = ContentType.Component,
                    ComponentName = "Counter",
                    ComponentState=new Dictionary<string, object>
                    {
                        {"Cnt",100 }
                    }
                },
                new ContentItem
                {
                    ContentType = ContentType.Component,
                    ComponentName = "Counter",
                          ComponentState=new Dictionary<string, object>
                    {
                        {"Cnt",10 }
                    }
                }
            }
        }
            }
        };

}