
@inject GoldenLayoutEventService GoldenLayoutEventService
@if(shouldRenderSpawner&&goldenLayout!=null)
{
	<div style="@Style" @attributes=@AdditionalAttributes>
		<CascadingValue Value="goldenLayout" >
			@ChildContent
		</CascadingValue>
	</div>
}

@code
{
	private GoldenLayout? goldenLayout{ get; set; }

	[Parameter] public string? Style { get; set; }
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object>? AdditionalAttributes { get; set; }
	[Parameter]
	public RenderFragment ?ChildContent{ get; set; }

	[Parameter]
	public string Identify { get; set; } = string.Empty;
	private bool shouldRenderSpawner;

	protected override Task OnInitializedAsync()
	{
		GoldenLayoutEventService.Subscribe(OnGoldenLayoutInited);
		return Task.CompletedTask;
	}
	private async Task OnGoldenLayoutInited(GoldenLayout goldenLayout, string identify)
	{
		if (Identify == identify)
		{
			this.goldenLayout = goldenLayout;
			shouldRenderSpawner = true;
			await InvokeAsync(StateHasChanged);
		}
	}

}