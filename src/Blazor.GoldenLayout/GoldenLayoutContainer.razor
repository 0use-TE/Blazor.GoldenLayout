@using Microsoft.JSInterop
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject GoldenLayoutComponentService GoldenLayoutComponentService
@inject GoldenLayoutEventService GoldenLayoutEventService
<div @ref=elementReference  style="@Style"  @attributes=@AdditionalAttributes>

</div>

@code
{
    [Parameter]
    public GoldenLayoutConfiguration? GoldenLayoutConfiguration { get; set; }

    [Parameter] public string? Style { get; set; }

    [Parameter]
    public RenderFragment? ChildContent{ get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> ?AdditionalAttributes { get; set; }

    [Parameter]
    public EventCallback NoItemSelectedCallback { get; set; }

    [Parameter]
    public Func<Task<GoldenLayoutConfiguration?>>? LoadGoldenLayoutCallBack{ get; set; }

    [Parameter]
    public string Identify { get; set; } = string.Empty;

    private DotNetObjectReference<GoldenLayoutContainer>? _dotNetRef;

    private class GoldenLayoutItem
    {
        public Type? ComponentType { get; set; }
        public string? Id { get; set; }
    }

    public GoldenLayout? goldenLayout;
    private ElementReference elementReference;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (GoldenLayoutConfiguration == null)
            {
                throw new Exception("GoldenLayoutConfiguration can not be null!");
            }

            //Load
            if(LoadGoldenLayoutCallBack!=null)
            {
                var config=await LoadGoldenLayoutCallBack.Invoke();
                if(config!=null)
                GoldenLayoutConfiguration = config;
            }


            _dotNetRef = DotNetObjectReference.Create(this);
            goldenLayout = await GoldenLayout.CreateGoldenLayout(_dotNetRef, JSRuntime, GoldenLayoutConfiguration, elementReference);
            await goldenLayout.RegisterComponent( GoldenLayoutComponentService.GetAll().Values);

            await goldenLayout.Init();

            GoldenLayoutEventService.Publish(goldenLayout,Identify);

            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task<GoldenLayoutConfiguration?> ToConfig()
    {
        if (goldenLayout == null)
            return null;
        return await goldenLayout.ToConfig();
    }
    [JSInvokable]
    public Task OnRegisterComponent()
    {
        return Task.CompletedTask;
    }
    [JSInvokable]
    public async Task OnNoItemSelected()
    {
        await NoItemSelectedCallback.InvokeAsync();
    }

}