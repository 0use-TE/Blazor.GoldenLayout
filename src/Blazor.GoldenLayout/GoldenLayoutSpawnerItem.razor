@using Microsoft.JSInterop
@inject IJSRuntime js
<div style="@Style" @attributes=@AdditionalAttributes id="@spawnerId">
	@ChildContent
</div>
@code
{
	private string spawnerId = $"spawner-{Guid.NewGuid().ToString()}"; // 唯一 ID
	[CascadingParameter]
	private GoldenLayout ?GoldenLayout{ get; set; }
	[Parameter] public string? Style { get; set; }
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object>? AdditionalAttributes { get; set; }
	[Parameter]
	public GoldenLayoutSpawnerType SpawnerType{ get; set; }
	[Parameter]
	public ContentItem? ContentItem{ get; set; }
	[Parameter]
	public RenderFragment? ChildContent{ get; set;}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
		await RegisterGoldenLayoutSpawner();
	}

	public async Task RegisterGoldenLayoutSpawner()
	{
		await (SpawnerType switch
		{
			GoldenLayoutSpawnerType.ByDrag => ByDrag(),
			GoldenLayoutSpawnerType.BySelection => BySelection(),
			GoldenLayoutSpawnerType.ToElement => ToElement(),
			_ => Task.CompletedTask
		});
	}

	private async Task ByDrag()
	{
		try
		{
			if (ContentItem== null||GoldenLayout==null)
				return;
			if (GoldenLayout.jsInterop.goldLayout == null)
				return;
			Console.WriteLine("Start  createDragSource");
			await GoldenLayout.jsInterop.CreateDragSource(spawnerId, ContentItem);
		}
		catch(Exception ex)
		{
			Console.WriteLine("Error:" + ex.Message);
		}

		}
		private async Task BySelection()
		{
		if (ContentItem == null)
			return;
		}
		private async Task ToElement()
		{
		}
	}
    
